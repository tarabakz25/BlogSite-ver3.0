---
interface Props {
  name: string;
  value?: string;
}

const { name, value = '' } = Astro.props;
---

<div class="markdown-editor">
  <div class="toolbar">
    <button type="button" data-action="bold" title="Â§™Â≠ó">B</button>
    <button type="button" data-action="italic" title="Êñú‰Ωì">I</button>
    <button type="button" data-action="code" title="„Ç≥„Éº„Éâ">{`<>`}</button>
    <button type="button" data-action="link" title="„É™„É≥„ÇØ">üîó</button>
    <button type="button" data-action="image" title="ÁîªÂÉè">üì∑</button>
    <button type="button" data-action="list" title="„É™„Çπ„Éà">‚Ä¢</button>
    <button type="button" data-action="quote" title="ÂºïÁî®">‚ùù</button>
    <div class="separator"></div>
    <button type="button" data-action="preview" title="„Éó„É¨„Éì„É•„ÉºÂàáÊõø">üëÅÔ∏è</button>
  </div>

  <div class="editor-container">
    <textarea 
      id={name}
      name={name}
      class="editor"
      value={value}
      placeholder="„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥Ë®òÊ≥ï„ÅßË®ò‰∫ã„ÇíÊõ∏„Åè"
    ></textarea>
    
    <div class="preview"></div>
  </div>
</div>

<style>
  .markdown-editor {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    height: 600px;
    background: var(--surface);
    border: 1px solid var(--border);
    border-radius: 8px;
    overflow: hidden;
  }

  .toolbar {
    display: flex;
    gap: 0.25rem;
    padding: 0.25rem;
    background: var(--surface);
    border-bottom: 1px solid var(--border);
  }

  .toolbar button {
    padding: 0.25rem 0.5rem;
    border: 1px solid var(--border);
    background: var(--background);
    color: var(--text);
    border-radius: 4px;
    cursor: pointer;
    font-family: var(--program_font);
    font-size: 0.875rem;
    transition: all 0.2s ease;
  }

  .toolbar button:hover {
    background: var(--surface);
    border-color: var(--accent);
  }

  .separator {
    width: 1px;
    background: var(--border);
    margin: 0 0.25rem;
  }

  .editor-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
    height: 100%;
    padding: 0.5rem;
  }

  .editor {
    width: 100%;
    height: 100%;
    padding: 0.5rem;
    background: var(--background);
    border: 1px solid var(--border);
    border-radius: 4px;
    resize: none;
    font-family: var(--program_font);
    font-size: 0.875rem;
    color: var(--text);
    line-height: 1.6;
  }

  .editor:focus {
    outline: none;
    border-color: var(--accent);
  }

  .preview {
    padding: 0.5rem;
    background: var(--background);
    border: 1px solid var(--border);
    border-radius: 4px;
    overflow-y: auto;
    color: var(--text);
    font-size: 0.875rem;
  }

  /* „Éó„É¨„Éì„É•„Éº„ÅÆ„Çπ„Çø„Ç§„É´ */
  .preview :global(h1),
  .preview :global(h2),
  .preview :global(h3) {
    margin-top: 1.5em;
    margin-bottom: 1em;
    font-weight: 600;
  }

  .preview :global(p) {
    margin-bottom: 1em;
    line-height: 1.8;
  }

  .preview :global(code) {
    background: var(--surface);
    padding: 0.2em 0.4em;
    border-radius: 4px;
    font-family: var(--program_font);
  }

  .preview :global(pre) {
    background: var(--surface);
    padding: 1em;
    border-radius: 4px;
    overflow-x: auto;
    margin: 1em 0;
  }

  .preview :global(blockquote) {
    border-left: 4px solid var(--accent);
    margin: 1em 0;
    padding-left: 1em;
    color: var(--text);
    opacity: 0.8;
  }

  .preview :global(ul),
  .preview :global(ol) {
    margin: 1em 0;
    padding-left: 2em;
  }

  .preview :global(li) {
    margin: 0.5em 0;
  }

  .preview :global(img) {
    max-width: 100%;
    height: auto;
    border-radius: 4px;
  }

  .preview :global(a) {
    color: var(--accent);
    text-decoration: none;
  }

  .preview :global(a:hover) {
    text-decoration: underline;
  }

  @media (max-width: 768px) {
    .editor-container {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  import { marked } from 'marked';

  const editor = document.querySelector<HTMLTextAreaElement>('.editor');
  const preview = document.querySelector<HTMLDivElement>('.preview');
  const toolbar = document.querySelector<HTMLDivElement>('.toolbar');
  
  if (editor && preview && toolbar) {
    // „Éó„É¨„Éì„É•„Éº„ÅÆÂàùÊúüÂåñ
    const updatePreview = async () => {
      preview.innerHTML = await marked.parse(editor.value);
    };

    editor.addEventListener('input', updatePreview);
    updatePreview();

    // „ÉÑ„Éº„É´„Éê„Éº„ÅÆÊ©üËÉΩ
    toolbar.addEventListener('click', (e) => {
      const button = (e.target as HTMLElement).closest('button');
      if (!button) return;

      const action = button.dataset.action;
      const start = editor.selectionStart;
      const end = editor.selectionEnd;
      const selection = editor.value.substring(start, end);

      let replacement = '';
      switch (action) {
        case 'bold':
          replacement = `**${selection || 'Â§™Â≠ó'}**`;
          break;
        case 'italic':
          replacement = `*${selection || 'Êñú‰Ωì'}*`;
          break;
        case 'code':
          replacement = selection.includes('\n')
            ? `\`\`\`\n${selection || '„Ç≥„Éº„Éâ'}\n\`\`\``
            : `\`${selection || '„Ç≥„Éº„Éâ'}\``;
          break;
        case 'link':
          replacement = `[${selection || '„É™„É≥„ÇØ„ÉÜ„Ç≠„Çπ„Éà'}](URL)`;
          break;
        case 'image':
          replacement = `![${selection || 'ÁîªÂÉè„ÅÆË™¨Êòé'}](ÁîªÂÉè„ÅÆURL)`;
          break;
        case 'list':
          replacement = `\n- ${selection || '„É™„Çπ„Éà„Ç¢„Ç§„ÉÜ„É†'}`;
          break;
        case 'quote':
          replacement = `> ${selection || 'ÂºïÁî®„ÉÜ„Ç≠„Çπ„Éà'}`;
          break;
        case 'preview':
          document.querySelector('.editor-container')?.classList.toggle('preview-mode');
          return;
      }

      editor.focus();
      editor.setRangeText(replacement, start, end, 'select');
      updatePreview();
    });

    // Ëá™Âãï‰øùÂ≠ò
    let saveTimeout: ReturnType<typeof setTimeout>;
    editor.addEventListener('input', () => {
      if (saveTimeout) clearTimeout(saveTimeout);
      saveTimeout = setTimeout(() => {
        localStorage.setItem('draft-' + editor.id, editor.value);
      }, 1000);
    });

    // ‰∏ãÊõ∏„Åç„ÅÆÂæ©ÂÖÉ
    const savedDraft = localStorage.getItem('draft-' + editor.id);
    if (savedDraft) {
      editor.value = savedDraft;
      updatePreview();
    }
  }
